뒤집은 소수

N개의 자연수가 입력되면 각 자연수를 뒤집은 후 그 뒤집은 수가 소수이면 그 소수를 출력하
는 프로그램을 작성하세요. 예를 들어 32를 뒤집으면 23이고, 23은 소수이다. 그러면 23을 출
력한다. 단 910를 뒤집으면 19로 숫자화 해야 한다. 첫 자리부터의 연속된 0은 무시한다.

▣ 입력설명
첫 줄에 자연수의 개수 N(3<=N<=100)이 주어지고, 그 다음 줄에 N개의 자연수가 주어진다.
각 자연수의 크기는 100,000를 넘지 않는다.

▣ 출력설명
첫 줄에 뒤집은 소수를 출력합니다. 출력순서는 입력된 순서대로 출력합니다.

▣ 입력예제 1
9
32 55 62 20 250 370 200 30 100

▣ 출력예제 1
23 2 73 2 3

<html>
    <head>
        <meta charset="UTF-8">
        <title>출력결과</title>
    </head>
    <body>
        <script>
            function isPrime(num){
                if(num===1) return false;
                for(let i=2; i<=parseInt(Math.sqrt(num)); i++){
                    if(num%i===0) return false;
                }
                return true;
            }
            function solution(arr){
                let answer=[];
                for(let x of arr){
                    let res=0;
                    while(x){
                        let t=x%10;
                        res=res*10+t;
                        x=parseInt(x/10);
                    }
                    if(isPrime(res)) answer.push(res);
                }
                return answer;
            }
            
            let arr=[32, 55, 62, 20, 250, 370, 200, 30, 100];
            console.log(solution(arr));
        </script>
    </body>
</html>



<html>
    <head>
        <meta charset="UTF-8">
        <title>출력결과</title>
    </head>
    <body>
        <script>
            function isPrime(num){
                if(num===1) return false;
                for(let i=2; i<=parseInt(Math.sqrt(num)); i++){
                    if(num%i===0) return false;
                }
                return true;
            }
            function solution(arr){
                let answer=[];
                for(let x of arr){
                    let res=Number(x.toString().split('').reverse().join(''));
                    if(isPrime(res)) answer.push(res);
                }
                return answer;
            }
            
            let arr=[32, 55, 62, 20, 250, 370, 200, 30, 100];
            console.log(solution(arr));
        </script>
    </body>
</html>



<script>
      function solution(arr, n) {
        const isPrime = (num) => {
          if (num <= 1) {
            // '1' 이하의 수눈 소수가 아닙니다.
            return false;
          }

          if (num % 2 === 0) {
            // '2'는 짝수 중에 유일한 소수이며,
            // 짝수는 '2'를 공통적으로 약수로 가지기 때문에 소수가 아닙니다.
            return num === 2 ? true : false;
          }

          for (let i = 3; i <= Math.sqrt(num); i += 2) {
            // 자기 자신을 약수로 가지기 때문에 자기 자신의 수 제곱근까지 for문을 돌리고,
            // 왜냐하면 소수는 자기자신을 약수로 가지기 때문,
            // 모든 짝수는 2를 공통적으로 약수로 가지기 때문 소수가 아님.
            // 고로 +2 씩 올라감.
            if (num % i === 0) {
              return false;
            }
            // 자기 자신의 수 제곱근까지 반복문 돌리면서 약수가 발견되면 false 반환
          }

          return true;
          // 위의 제약사항이 없다면 true 반환
        };

        let answerArr = [];

        for (let i = 0; i < arr.length; i++) {
          const reversed = parseInt(
            arr[i].toString().split('').reverse().join('')
          );

          if (isPrime(reversed)) {
            answerArr.push(reversed);
          }
        }
        return answerArr;
      }

      let arr = [32, 55, 62, 20, 250, 370, 200, 30, 100];
      let n = 9;
      console.log(solution(arr, n));
    </script>